// node-jestlike-snapshot v1

exports[`bind > const and function exports 1`] = `
const magic = 420;
let open = @prop(0, false);
function toggle() {
  open.value = !open.value;
}
@bind({
  magic,
  toggle
});

`;

exports[`bind > handles explicit undefined initializer 1`] = `
let count = @prop(0);
count.value = 123;
count.value;

`;

exports[`bind > handles props initialized by another var 1`] = `
let foo = () => {
};
let bar = @prop(0, () => foo);
bar.value;

`;

exports[`bind > only one specifier for a bind 1`] = `
tried to export something that has already been exported (4:12)
2:       export const magic = 420;
3: 
4:       export { magic as MAGIC_NUMBER };
                  ^
5:     
`;

exports[`bind > separate export specifier 1`] = `
const magic = 420;
let open = @prop(0, false);
function toggle() {
  open.value = !open.value;
}
@bind({
  MAGIC_NUMBER: magic,
  toggle
});

`;

exports[`computed > mutated variable referencing mutated ref member property 1`] = `
let value1 = @signal({
  foo: 123
});
let computed = @computed(() => value1.value.foo);
foo: unrelated = value1.value.foo;
value1.value = {
  foo: 234
};
computed.value = 345;
unrelated = 123;
console.log(value1.value, computed.value);
console.log(unrelated);

`;

exports[`computed > mutated variable referencing unmutated ref member property 1`] = `
let value1 = {
  foo: 123
};
let computed = @signal(value1.foo);
foo: unrelated = value1.foo;
computed.value = 234;
unrelated = 345;
console.log(value1, computed.value);
console.log(unrelated);

`;

exports[`computed > mutated variables 1`] = `
$: value1;
let value2 = @signal(100);
let value3 = @signal(new Date());
foo: unrelated = 2;
value1 = 1;
value2.value = 2;
value3.value = 3;
unrelated = 4;

`;

exports[`computed > mutating variable referencing unmutated ref 1`] = `
let value1 = 100;
let computed = @signal(value1);
foo: unrelated = value1;
computed.value = 200;
unrelated = 300;
console.log(value1, computed.value);
console.log(unrelated);

`;

exports[`computed > object spread from a store 1`] = `
let scores = @signal(), unknowns = @signal();
let $search_params = @subscribe(search_params);
@effect(() => {
  let %d0, %d1, %d2;
  (%d0 = calculate($search_params.value.get('augments')?.split(',') || []), {scores: %d1, unknowns: %d2} = %d0, scores.value = %d1, unknowns.value = %d2, %d0);
});
@effect(() => console.log({
  scores: scores.value,
  unknowns: unknowns.value
}));

`;

exports[`computed > unmutated variable referencing mutated ref member property 1`] = `
let value1 = @signal({
  foo: 123
});
let computed = @computed(() => value1.value.foo);
foo: unrelated = value1.value.foo;
value1.value = {
  foo: 234
};
console.log(value1.value, computed.value);
console.log(unrelated);

`;

exports[`computed > unmutated variable referencing unmutated ref member property 1`] = `
let value1 = {
  foo: 123
};
let computed = value1.foo;
let unrelated = value1.foo;
console.log(value1, computed);
console.log(unrelated);

`;

exports[`computed > unused variables 1`] = `
$: value1;
let value2 = 100;
let value3 = new Date();
foo: unrelated = 3;

`;

exports[`computed > variable referencing mutated ref 1`] = `
let value1 = @signal(100);
let value2 = @signal(new Date());
let computed1 = @computed(() => value1.value * 2);
let computed2 = @computed(() => value2.value);
foo: unrelated = value1.value + value2.value;
value1.value = 200;
value2.value = Date.now();
console.log(value1.value, computed1.value);
console.log(value2.value, computed2.value);
console.log(unrelated);

`;

exports[`computed > variable referencing unmutated ref 1`] = `
let value1 = 100;
let value2 = new Date();
let computed1 = value1 * 2;
let computed2 = value2;
foo: unrelated = value1 + value2;
console.log(value1, computed1);
console.log(value2, computed2);
console.log(unrelated);

`;

exports[`effect > handles direct statements 1`] = `
let value = @signal(0);
let array = @signal([]);
value.value += 1;
array.value = [1, 2, 3];
@effect(() => {
  if (value.value % 2 === 0) console.log('odd!');
});
@effect(() => {
  for (let item of array.value) console.log(item);
});
@effect(() => console.log(array.value));

`;

exports[`effect > only transform root scope 1`] = `
let value = @signal(0);
value.value += 1;
@effect(() => console.log(value.value));
function increment() {
  $: console.log(value.value);
}

`;

exports[`effect > references mutated refs 1`] = `
$: console.log(value1, value2);
foo: console.log(value1, value2);
$: {
  console.log(value1);
  console.log(value2);
}
let value1 = @signal({
  foo: 123
});
let value2 = @signal(123);
value1.value = {
  foo: 234
};
value2.value = 543;
@effect(() => console.log(value1.value, value2.value));
foo: console.log(value1.value, value2.value);
@effect(() => {
  console.log(value1.value);
  console.log(value2.value);
});
foo: {
  console.log(value1.value);
  console.log(value2.value);
}

`;

exports[`effect > references unmutated refs 1`] = `
$: console.log(value1, value2);
foo: console.log(value1, value2);
$: {
  console.log(value1);
  console.log(value2);
}
foo: {
  console.log(value1);
  console.log(value2);
}
let value1 = {
  foo: 123
};
let value2 = 123;
$: console.log(value1, value2);
foo: console.log(value1, value2);
$: {
  console.log(value1);
  console.log(value2);
}
foo: {
  console.log(value1);
  console.log(value2);
}

`;

exports[`peek > ignores variables on non-valid scopes 1`] = `
import {peek} from '@intrnl/velvet';
function inner() {
  let count = 123;
  count = 234;
  peek(count);
}

`;

exports[`peek > removes peek call on computed unmutated variables 1`] = `
import {peek} from '@intrnl/velvet';
let count = 2;
let doubled = count * 2;
doubled;

`;

exports[`peek > removes peek call on unmutated variables 1`] = `
import {peek} from '@intrnl/velvet';
let count = 123;
count;

`;

exports[`peek > transforms peek call on computed mutated variables 1`] = `
import {peek} from '@intrnl/velvet';
let count = @signal(2);
let doubled = @computed(() => count.value * 2);
count.value = 3;
doubled.peek();

`;

exports[`peek > transforms peek call on mutated variables 1`] = `
import {peek} from '@intrnl/velvet';
let count = @signal(123);
count.value = 234;
count.peek();

`;

exports[`program finalizer > hoists imports 1`] = `
import {define} from "@intrnl/velvet/internal";
import foo from 'foo';
import {bar} from 'bar';
function setup($$root, $$host) {
  console.log(bar);
}
export default define(null, setup, {}, []);

`;

exports[`program finalizer > props test 1`] = `
import {prop} from "@intrnl/velvet/internal";
let count = prop(0, -1);
let magic = prop(1, 420);

`;

exports[`prop > handles separate export specifier 1`] = `
let _count = @prop(0, 0);
let foo = @prop(1, 1);

`;

exports[`prop > throws on exporting default 1`] = `
export default is reserved for component definition (2:3)
1: 
2:       export default 123;
         ^
3:     
`;

exports[`prop > throws on one variable exported twice 1`] = `
tried to export something that has already been exported (4:24)
2:       let foo = 123;
3: 
4:       export { foo as bar, foo as baz };
                              ^
5:     
`;

exports[`prop > unused properties 1`] = `
let value1 = @prop(0);
let value2 = @prop(1, 100);
let value3 = @prop(2, () => new Date());

`;

exports[`prop > variable referencing mutated ref 1`] = `
let value1 = @signal(1);
let value2 = @signal(new Date());
let value3 = @prop(0, () => value1.value);
let value4 = @prop(1, () => value2.value);
let value5 = @prop(2, () => value1.value + value2.value);
value1.value = 3;
value2.value *= 4;

`;

exports[`prop > variable referencing unmutated ref 1`] = `
let value1 = 1;
let value2 = () => {
};
let value3 = @prop(0, () => value1);
let value4 = @prop(1, () => value2);
let value5 = @prop(2, () => value1 + value2);

`;

exports[`prop > variables with mutation 1`] = `
console.log({
  value1,
  value2,
  value3,
  value4
});
let value1 = @prop(0);
let value2 = @prop(1, 100);
let value3 = @prop(2, () => new Date());
let value4 = @prop(3, () => value2.value);
value1.value += 1;
value2.value += 2;
value3.value += 3;
value4.value += 4;
console.log({
  value1: value1.value,
  value2: value2.value,
  value3: value3.value,
  value4: value4.value
});
function increment() {
  let value4 = 200;
  value4 += 4;
  console.log({
    value1: value1.value,
    value2: value2.value,
    value3: value3.value,
    value4
  });
}

`;

exports[`prop > variables with no mutation 1`] = `
let value1 = @prop(0);
let value2 = @prop(1, 100);
let value3 = @prop(2, () => new Date());
let value4 = @prop(3, () => value2.value);
console.log({
  value1: value1.value,
  value2: value2.value,
  value3: value3.value,
  value4: value4.value
});
function increment() {
  let value4 = 200;
  console.log({
    value1: value1.value,
    value2: value2.value,
    value3: value3.value,
    value4
  });
}

`;

exports[`ref > handles optional chaining 1`] = `
let foo = @signal(null);
foo.value = {
  bar: 123
};
console.log(foo.value?.bar);

`;

exports[`ref > mutated variable accessing member property 1`] = `
console.log(state.count);
console.log(current_date.toISOString());
let state = @signal({
  count: 0
});
let current_date = @signal(new Date());
console.log(state.value.count);
console.log(current_date.value.toISOString());
state.value = {
  count: 0
};
current_date.value = new Date();

`;

exports[`ref > mutated variable calling 1`] = `
let call = @signal(() => 1);
call.value = () => 2;
(0, call.value)();

`;

exports[`ref > mutated variable calling member property 1`] = `
let today = new Date();
let formatter = @signal(new Intl.DateTimeFormat());
console.log('Today is ' + formatter.value.format(today));
formatter.value = null;

`;

exports[`ref > mutated variable mutating member property 1`] = `
let state = @signal({
  count: 0
});
state.value = {
  count: 1
};
console.log(state.value.count += 1);

`;

exports[`ref > mutated variable, referencing unmutated variable 1`] = `
let value1 = 100;
let value2 = @signal(value1);
value2.value = 200;
console.log(value1, value2.value);

`;

exports[`ref > postfix 1`] = `
let count = @signal(0);
count.value++;
count.value--;
console.log(count.value++, count.value++);
function increment() {
  console.log(count.value++, count.value++);
  return count.value++;
}
let decrement = () => count.value--;

`;

exports[`ref > prefix 1`] = `
let count = @signal(0);
++count.value;
--count.value;
console.log(++count.value, ++count.value);
function increment() {
  console.log(++count.value, ++count.value);
  return ++count.value;
}
let decrement = () => --count.value;

`;

exports[`ref > two variables on one declaration, one mutated 1`] = `
let value1 = @signal(), value2;
value1.value = 100;

`;

exports[`ref > two variables on one declaration, two mutated 1`] = `
let value1 = @signal(), value2 = @signal();
value1.value = 100;
value2.value = 200;

`;

exports[`ref > unmutated variable accessing member property 1`] = `
let state = {
  count: 0
};
let current_date = new Date();
console.log(state.count);
console.log(current_date.toISOString());

`;

exports[`ref > unmutated variable calling 1`] = `
let call = () => 1;
call();

`;

exports[`ref > unmutated variable mutating member property 1`] = `
let state = {
  count: 0
};
state.count += 1;

`;

exports[`ref > unmutated variable referencing mutated variable 1`] = `
let value1 = @signal(100);
let value2 = value1.value;
value1.value = 200;
console.log(value1.value, value2);

`;

exports[`ref > unused variables 1`] = `
let value1;
let value2 = 100;
let value3 = new Date();

`;

exports[`ref > variable mutated with spread 1`] = `
let foo = @signal(), bar = @signal(), baz = @signal();
let %d0, %d1, %d2, %d3;
(%d0 = obj, {foo: %d1, b: %d2, buzz, c: car, ...%d3} = %d0, foo.value = %d1, bar.value = %d2, baz.value = %d3, %d0);
let $obj = @subscribe(obj);
let %d4, %d5, %d6, %d7;
(%d4 = $obj.value, {foo: %d5, b: %d6, buzz, c: car, ...%d7} = %d4, foo.value = %d5, bar.value = %d6, baz.value = %d7, %d4);
let %d8, %d9, %d10;
(%d8 = arr, [%d9, buzz, ...%d10] = %d8, foo.value = %d9, bar.value = %d10, %d8);
let $arr = @subscribe(arr);
let %d11, %d12, %d13;
(%d11 = $arr.value.foo, [%d12, buzz, ...%d13] = %d11, foo.value = %d12, bar.value = %d13, %d11);

`;

exports[`ref > variable mutation with logical assignment operators 1`] = `
let value1 = @signal(100);
value1.value ??= 200;
value1.value ||= 300;
value1.value &&= 300;

`;

exports[`ref > variables with mutation 1`] = `
console.log({
  value1,
  value2,
  value3,
  value4
});
let value1 = @signal();
let value2 = @signal(100);
let value3 = @signal(new Date());
let value4 = @signal(value2.value);
value1.value += 1;
value2.value += 2;
value3.value += 3;
value4.value += 4;
console.log({
  value1: value1.value,
  value2: value2.value,
  value3: value3.value,
  value4: value4.value
});
function increment() {
  let value4 = 200;
  value4 += 4;
  console.log({
    value1: value1.value,
    value2: value2.value,
    value3: value3.value,
    value4
  });
}

`;

exports[`ref > variables with no mutation 1`] = `
console.log({
  value1,
  value2,
  value3,
  value4
});
let value1;
let value2 = 100;
let value3 = new Date();
let value4 = value2;
console.log({
  value1,
  value2,
  value3,
  value4
});
function increment() {
  let value4 = 200;
  console.log({
    value1,
    value2,
    value3,
    value4
  });
}

`;

exports[`reserved > can declare $$$ variables 1`] = `
let $$$foo = @prop(0, 123);
let $$$bar = 333;

`;

exports[`reserved > throws on declaring $$ 1`] = `
$ and $$-prefixed variables are reserved and cannot be declared (2:14)
1: 
2:       export let $$foo = 'bar';
                    ^
3:     
`;

exports[`reserved > throws on reassigning $$ 1`] = `
tried reassignment to $$-prefixed variables (2:3)
1: 
2:       $$root = null;
         ^
3:     
`;

exports[`store > binary setter 1`] = `
let $store = @subscribe(store);
store.set($store.value + 123);

`;

exports[`store > getter 1`] = `
let $store = @subscribe(store);
$store.value;

`;

exports[`store > getter within computed 1`] = `
let $searchParams = @subscribe(searchParams);
let query = @computed(() => $searchParams.value.query);

`;

exports[`store > logical setter 1`] = `
let $store = @subscribe(store);
store.set($store.value ?? 123);

`;

exports[`store > lone block statement 1`] = `
let $foo = @subscribe(foo);
{
  $foo.value;
}

`;

exports[`store > multiple getter references 1`] = `
let $value1 = @subscribe(value1);
function increment() {
  console.log($value1.value);
}
let $value2 = @subscribe(value2);
console.log($value2.value);

`;

exports[`store > multiple setter references 1`] = `
let $value1 = @subscribe(value1);
function increment() {
  value1.set($value1.value + 1);
}
value2.set(2);

`;

exports[`store > mutating member property 1`] = `
let $foo = @subscribe(foo);
$foo.value.bar = 123;

`;

exports[`store > no affecting inner scope 1`] = `
let $foo = @subscribe(foo);
function log() {
  let $bar = 123;
  console.log($bar, $foo.value);
}
console.log($foo.value);

`;

exports[`store > only alter single $ 1`] = `
let $foo = @subscribe(foo);
console.log($foo.value, $$, $$$);

`;

exports[`store > reference store twice 1`] = `
let $foo = @subscribe(foo);
console.log($foo.value, $foo.value);

`;

exports[`store > retrieving member property 1`] = `
let $foo = @subscribe(foo);
console.log($foo.value.bar);

`;

exports[`store > setter 1`] = `
store.set(123);
let $store = @subscribe(store);
store.set($store.value || 123);
store.set($store.value + 1);
store.set($store.value);
store.set($store.value * 234);

`;

exports[`store > subscribing to a ref 1`] = `
let value1 = @signal();
value1.value = get_store();
let $value1 = @subscribe(value1.value);
console.log($value1.value);

`;

exports[`store > throws on declaring $ variables 1`] = `
$ and $$-prefixed variables are reserved and cannot be declared (2:7)
1: 
2:       let $foo = 'bar';
             ^
3:     
`;

exports[`store > throws on lone $ 1`] = `
no singular $ reference (2:15)
1: 
2:       console.log($);
                     ^
3:     
`;

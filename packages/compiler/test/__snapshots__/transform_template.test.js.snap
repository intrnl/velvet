// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`attribute attribute quoted 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div class=foo></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`attribute attribute unquoted 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div class=foo></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`attribute attribute quotations 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div a='foo bar'sq=\"'\"dq='\"'></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`attribute attribute expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @attr(%child0, "class", className);
@append($$root, %fragment0);"
`;

exports[`attribute attribute none 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<textarea readonly></textarea>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`attribute fails on attribute with invalid expression 1`] = `
"Acorn error: Unexpected token (1:12)
1: <div class={.foo}></div>
               ^"
`;

exports[`attribute handles attribute expression with parenthesis 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @attr(%child0, "class", foo.bar);
@append($$root, %fragment0);"
`;

exports[`attribute boolean expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<textarea></textarea>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @toggle(%child0, "readonly", is_readonly);
@append($$root, %fragment0);"
`;

exports[`attribute boolean none 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<textarea ?readonly></textarea>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`attribute property expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["value"] = value;
@append($$root, %fragment0);"
`;

exports[`attribute property none 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["value"] = true;
@append($$root, %fragment0);"
`;

exports[`attribute property checkbox group 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input type=checkbox>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0.checked = selected.includes(%child0.value);
@append($$root, %fragment0);"
`;

exports[`attribute property select value 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<select multiple></select>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @set_select_values(%child0, value);
@append($$root, %fragment0);"
`;

exports[`attribute event expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<button></button>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@on(%child0, "click", handle_click);
@append($$root, %fragment0);"
`;

exports[`attribute binding expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["value"] = value;
@on(%child0, "input", () => value = %child0.value);
@append($$root, %fragment0);"
`;

exports[`attribute binding member expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["value"] = foo.bar;
@on(%child0, "input", () => foo.bar = %child0.value);
@append($$root, %fragment0);"
`;

exports[`attribute binding component expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<x></x>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = new Component();
$: %child1["foo"] = value;
@on(%child1, "update:foo", %event => value = %event.detail);
@replace(%child0, %child0 = %child1, true);
@append($$root, %fragment0);"
`;

exports[`attribute binding checkbox expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input type=checkbox>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["checked"] = value;
@on(%child0, "input", () => value = %child0.checked);
@append($$root, %fragment0);"
`;

exports[`attribute binding checkbox group 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input type=checkbox>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0.checked = selected.includes(%child0.value);
@on(%child0, "input", () => selected = @get_checked_values(selected, %child0.value, %child0.checked));
@append($$root, %fragment0);"
`;

exports[`attribute binding radio group 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input type=radio>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0.checked = picked === %child0.value;
@on(%child0, "input", () => picked = %child0.value);
@append($$root, %fragment0);"
`;

exports[`attribute binding select value 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<select multiple></select>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @set_select_values(%child0, value);
@on(%child0, "input", () => value = @get_select_values(%child0));
@append($$root, %fragment0);"
`;

exports[`attribute binding input number 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input type=number>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["value"] = value;
@on(%child0, "input", () => value = @to_number(%child0.value));
@append($$root, %fragment0);"
`;

exports[`attribute binding textarea value 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<textarea></textarea>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: %child0["value"] = content;
@on(%child0, "input", () => content = %child0.value);
@append($$root, %fragment0);"
`;

exports[`attribute fails on binding with no value 1`] = `[Function: toString]`;

exports[`attribute fails on binding with invalid expression 1`] = `[Function: toString]`;

exports[`attribute fails on binding with optional member expression 1`] = `[Function: toString]`;

exports[`attribute ref expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
input = %child0;
@append($$root, %fragment0);"
`;

exports[`attribute action expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@use(%child0, action, null);
@append($$root, %fragment0);"
`;

exports[`attribute action expression array 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<time></time>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@use(%child0, relformatter, null);
@append($$root, %fragment0);"
`;

exports[`attribute action expression array with options 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<time></time>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@use(%child0, relformatter, () => ({ value: Date.now() }));
@append($$root, %fragment0);"
`;

exports[`attribute throws on action expression array with nothing 1`] = `[Function: toString]`;

exports[`attribute throws on action expression array with too many options 1`] = `[Function: toString]`;

exports[`attribute spread expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<input>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @assign(%child0, props);
@append($$root, %fragment0);"
`;

exports[`attribute ifdef attributes 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<a></a>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @attr_ifdef(%child0, "target", target);
@append($$root, %fragment0);"
`;

exports[`attribute class object expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div class=foo></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @class_toggle(%child0, "baz", baz);
$: @class_toggle(%child0, computed, true);
@append($$root, %fragment0);"
`;

exports[`attribute style object expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div style=color:red></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
$: @style_set(%child0, "background", bg);
$: @style_set(%child0, '--baz', baz);
$: @style_set(%child0, computed, false);
@append($$root, %fragment0);"
`;

exports[`attribute class object expression 2 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<li><a href=#/>All</a></li><li><a href=#/active>Active</a></li><li><a href=#/completed>Completed</a></li>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @first_child(%child1);
let %child3 = /*#__PURE__*/ @next_sibling(%child0);
let %child4 = /*#__PURE__*/ @first_child(%child3);
let %child5 = /*#__PURE__*/ @first_child(%child4);
let %child6 = /*#__PURE__*/ @next_sibling(%child3);
let %child7 = /*#__PURE__*/ @first_child(%child6);
let %child8 = /*#__PURE__*/ @first_child(%child7);
$: @class_toggle(%child1, "selected", visibility === 'all');
$: @class_toggle(%child4, "selected", visibility === 'active');
$: @class_toggle(%child7, "selected", visibility === 'completed');
@append($$root, %fragment0);"
`;

exports[`element selfclosing on a non-void element 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<button></button>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`element v:element 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = %component => {
	let %child1 = @create(%component);
	return %child0;
};

@dynamic(%child0, %block1, () => Element);
@append($$root, %fragment0);"
`;

exports[`element v:element with children 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = %component => {
	let %%template1 = /*#__PURE__*/ @html("Hello <!>!");
	let %fragment1 = @clone(%template1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	let %child3 = /*#__PURE__*/ @next_sibling(%child2);
	let %child4 = /*#__PURE__*/ @next_sibling(%child3);
	let %child1 = @create(%component);
	@text(%child3, () => name, @replace);
	@append(%child1, %fragment1);
	return %child0;
};

@dynamic(%child0, %block1, () => Element);
@append($$root, %fragment0);"
`;

exports[`element multiple v:element 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!><!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child3 = /*#__PURE__*/ @next_sibling(%child0);

let %block1 = %component => {
	let %%template1 = /*#__PURE__*/ @html("Foo!");
	let %fragment1 = @clone(%template1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	let %child1 = @create(%component);
	@append(%child1, %fragment1);
	return %child0;
};

let %block2 = %component => {
	let %%template2 = /*#__PURE__*/ @html("Bar!");
	let %fragment2 = @clone(%template2);
	let %child5 = /*#__PURE__*/ @first_child(%child4);
	let %child4 = @create(%component);
	@append(%child4, %fragment2);
	return %child3;
};

@dynamic(%child0, %block1, () => element);
@dynamic(%child3, %block2, () => element);
@append($$root, %fragment0);"
`;

exports[`element throws on improper closing tag 1`] = `
"</button> attempted to close an element that was not open (1:13)
1: <legend>Title</button>
                ^"
`;

exports[`element whitespace on closing tag 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<button>Hello</button>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
@append($$root, %fragment0);"
`;

exports[`element throws on script closing tag whitespace 1`] = `
"expected script closing tag (1:41)
1: <script>console.log('hello')</script    >
                                            ^"
`;

exports[`component v:self on a custom element 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<x><x>hello world!</x></x>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @first_child(%child0);
let %child4 = /*#__PURE__*/ @first_child(%child2);
let %child3 = new $$host.constructor();
let %child1 = new x-app();
@replace(%child2, %child2 = %child3, true);
@replace(%child0, %child0 = %child1, true);
@append($$root, %fragment0);"
`;

exports[`component v:component 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = %component => {
	let %child1 = new %component();
	return %child0;
};

@dynamic(%child0, %block1, () => Component);
@append($$root, %fragment0);"
`;

exports[`component v:component with children 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = %component => {
	let %%template1 = /*#__PURE__*/ @html("Hello <!>!");
	let %fragment1 = @clone(%template1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	let %child3 = /*#__PURE__*/ @next_sibling(%child2);
	let %child4 = /*#__PURE__*/ @next_sibling(%child3);
	let %child1 = new %component();
	@text(%child3, () => name, @replace);
	@append(%child1, %fragment1);
	return %child0;
};

@dynamic(%child0, %block1, () => Component);
@append($$root, %fragment0);"
`;

exports[`component multiple component 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<x>Button</x><x>Link Button</x>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @first_child(%child0);
let %child1 = new Button();
let %child3 = /*#__PURE__*/ @next_sibling(%child0);
let %child5 = /*#__PURE__*/ @first_child(%child3);
let %child4 = new Button();
@replace(%child0, %child0 = %child1, true);
$: @attr(%child4, "href", "/");
@replace(%child3, %child3 = %child4, true);
@append($$root, %fragment0);"
`;

exports[`component multiple v:component 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!><!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child3 = /*#__PURE__*/ @next_sibling(%child0);

let %block1 = %component => {
	let %%template1 = /*#__PURE__*/ @html("Button 1");
	let %fragment1 = @clone(%template1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	let %child1 = new %component();
	@append(%child1, %fragment1);
	return %child0;
};

let %block2 = %component => {
	let %%template2 = /*#__PURE__*/ @html("Button 2");
	let %fragment2 = @clone(%template2);
	let %child5 = /*#__PURE__*/ @first_child(%child4);
	let %child4 = new %component();
	@append(%child4, %fragment2);
	return %child3;
};

@dynamic(%child0, %block1, () => Button);
@dynamic(%child3, %block2, () => Button);
@append($$root, %fragment0);"
`;

exports[`expression custom element 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<x>hello <!>!</x>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @first_child(%child0);
let %child3 = /*#__PURE__*/ @next_sibling(%child2);
let %child4 = /*#__PURE__*/ @next_sibling(%child3);
let %child1 = new x-app();
@text(%child3, () => name, @replace);
@replace(%child0, %child0 = %child1, true);
@append($$root, %fragment0);"
`;

exports[`expression component 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<x>hello <!>!</x>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @first_child(%child0);
let %child3 = /*#__PURE__*/ @next_sibling(%child2);
let %child4 = /*#__PURE__*/ @next_sibling(%child3);
let %child1 = new Main();
@text(%child3, () => name, @replace);
@replace(%child0, %child0 = %child1, true);
@append($$root, %fragment0);"
`;

exports[`expression fails on invalid expression 1`] = `
"Acorn error: Unexpected token (1:12)
1: hello {name.}!
               ^"
`;

exports[`expression handles parenthesis 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div>hello <!>!</div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @next_sibling(%child1);
let %child3 = /*#__PURE__*/ @next_sibling(%child2);
@text(%child2, () => name, @replace);
@append($$root, %fragment0);"
`;

exports[`expression multiple expressions 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div>hello, <!><!>!</div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @next_sibling(%child1);
let %child3 = /*#__PURE__*/ @next_sibling(%child2);
let %child4 = /*#__PURE__*/ @next_sibling(%child3);
@text(%child2, () => first_name, @replace);
@text(%child3, () => last_name, @replace);
@append($$root, %fragment0);"
`;

exports[`named expression unknown named expression 1`] = `[Function: toString]`;

exports[`log expression single 1`] = `"$: console.log(foo);"`;

exports[`log expression multiple 1`] = `"$: console.log(foo, bar, baz);"`;

exports[`log expression values 1`] = `
"$: console.log('test', { foo, baz, baz });
$: console.log([foo, bar, baz]);"
`;

exports[`log expression in conditional 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@show(%child0, () => foo ? null : null);
@append($$root, %fragment0);"
`;

exports[`log expression in conditional with text 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child1 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("Hello!");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	$: console.log($$root, foo);
	@after($$root, %fragment1);
	return %child0;
};

@show(%child1, () => foo ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`let expression single 1`] = `"let foo = 123;"`;

exports[`let expression throws on incorrect definition 1`] = `
"expected {@let ...} to contain an identifier (1:6)
1: {@let }
         ^"
`;

exports[`let expression throws on incorrect definition 2`] = `
"expected {@let foo ...} to contain an initializer (1:9)
1: {@let foo}
            ^"
`;

exports[`let expression throws on incorrect definition 3`] = `
"expected {@let foo ...} to contain an initializer (1:9)
1: {@let foo.bar = 123}
            ^"
`;

exports[`conditional logic consequent 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>foo!</div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @first_child(%child0);
	@after($$root, %fragment1);
	return %child0;
};

@show(%child2, () => foo ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic consequent and alternate 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child4 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>foo!</div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @first_child(%child0);
	@after($$root, %fragment1);
	return %child0;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("<div>bar!</div>");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child2 = /*#__PURE__*/ @first_child(%fragment2);
	let %child3 = /*#__PURE__*/ @first_child(%child2);
	@after($$root, %fragment2);
	return %child2;
};

@show(%child4, () => foo ? %block1 : %block2);
@append($$root, %fragment0);"
`;

exports[`conditional logic consequent and alternate test 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child4 = /*#__PURE__*/ @first_child(%fragment0);

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("<div>bar!</div>");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child2 = /*#__PURE__*/ @first_child(%fragment2);
	let %child3 = /*#__PURE__*/ @first_child(%child2);
	@after($$root, %fragment2);
	return %child2;
};

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>foo!</div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @first_child(%child0);
	@after($$root, %fragment1);
	return %child0;
};

@show(%child4, () => foo ? %block1 : bar ? %block2 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic nested consequent 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child5 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>foo!</div><!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @first_child(%child0);
	let %child4 = /*#__PURE__*/ @next_sibling(%child0);

	let %block2 = $$root => {
		let %%template2 = /*#__PURE__*/ @html("<div>bar!</div>");
		let %fragment2 = /*#__PURE__*/ @clone(%template2);
		let %child2 = /*#__PURE__*/ @first_child(%fragment2);
		let %child3 = /*#__PURE__*/ @first_child(%child2);
		@after($$root, %fragment2);
		return %child2;
	};

	@show(%child0, () => bar ? %block2 : null);
	@after($$root, %fragment1);
	return %child4;
};

@show(%child5, () => foo ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional before expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!><div>Hello, <!>!</div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child1 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @next_sibling(%child1);
let %child3 = /*#__PURE__*/ @first_child(%child2);
let %child4 = /*#__PURE__*/ @next_sibling(%child3);
let %child5 = /*#__PURE__*/ @next_sibling(%child4);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("Loading!");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

@show(%child1, () => loading ? %block1 : null);
@text(%child4, () => name, @replace);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing expression 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<!><!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @next_sibling(%child0);
	@text(%child0, () => person.name, @replace);
	@after($$root, %fragment1);
	return %child1;
};

@show(%child2, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing two expressions 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child3 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<!><!><!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @next_sibling(%child0);
	let %child2 = /*#__PURE__*/ @next_sibling(%child1);
	@text(%child0, () => person.first_name, @replace);
	@text(%child1, () => person.last_name, @replace);
	@after($$root, %fragment1);
	return %child2;
};

@show(%child3, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing component 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child3 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<x>Greet, </x>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child2 = /*#__PURE__*/ @first_child(%child0);
	let %child1 = new Button();
	@text(%child2, () => person.name, @after);
	@replace(%child0, %child0 = %child1, true);
	@after($$root, %fragment1);
	return %child0;
};

@show(%child3, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing v:component 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child4 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<!><!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child3 = /*#__PURE__*/ @next_sibling(%child0);

	let %block2 = %component => {
		let %%template2 = /*#__PURE__*/ @html("Greet, ");
		let %fragment2 = @clone(%template2);
		let %child2 = /*#__PURE__*/ @first_child(%child1);
		let %child1 = new %component();
		@text(%child2, () => person.name, @after);
		@append(%child1, %fragment2);
		return %child0;
	};

	@dynamic(%child0, %block2, () => Button);
	@after($$root, %fragment1);
	return %child3;
};

@show(%child4, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing v:element 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child4 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<!><!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child3 = /*#__PURE__*/ @next_sibling(%child0);

	let %block2 = %component => {
		let %%template2 = /*#__PURE__*/ @html("Greet, ");
		let %fragment2 = @clone(%template2);
		let %child2 = /*#__PURE__*/ @first_child(%child1);
		let %child1 = @create(%component);
		@text(%child2, () => person.name, @after);
		@append(%child1, %fragment2);
		return %child0;
	};

	@dynamic(%child0, %block2, () => 'button');
	@after($$root, %fragment1);
	return %child3;
};

@show(%child4, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing v:self 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child5 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<x>Greetings, <!>!</x>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child2 = /*#__PURE__*/ @first_child(%child0);
	let %child3 = /*#__PURE__*/ @next_sibling(%child2);
	let %child4 = /*#__PURE__*/ @next_sibling(%child3);
	let %child1 = new $$host.constructor();
	@text(%child3, () => person.name, @replace);
	@replace(%child0, %child0 = %child1, true);
	@after($$root, %fragment1);
	return %child0;
};

@show(%child5, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional containing two elements 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div></div><div></div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @next_sibling(%child0);
	@text(%child0, () => person.first_name, @append);
	@text(%child1, () => person.last_name, @append);
	@after($$root, %fragment1);
	return %child1;
};

@show(%child2, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional after static 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>hello </div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	@text(%child2, () => person.name, @after);
	@after($$root, %fragment1);
	return %child1;
};

@show(%child0, () => person ? %block1 : null);
@append($$root, %fragment0);"
`;

exports[`conditional logic conditional between static sandwich 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div><div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child3 = /*#__PURE__*/ @next_sibling(%child0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>hello </div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	@text(%child2, () => person.name, @after);
	@after($$root, %fragment1);
	return %child1;
};

@show(%child0, () => person ? %block1 : null);
@text(%child3, () => person, @append);
@append($$root, %fragment0);"
`;

exports[`conditional logic wraps svg elements properly 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<svg><!><foreignObject><!></foreignObject></svg>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @first_child(%child0);
let %child3 = /*#__PURE__*/ @next_sibling(%child2);
let %child5 = /*#__PURE__*/ @first_child(%child3);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<svg><rect></rect>", true);
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child1;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("<div></div>");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child4 = /*#__PURE__*/ @first_child(%fragment2);
	@after($$root, %fragment2);
	return %child4;
};

@show(%child2, () => foo ? %block1 : null);
@show(%child5, () => bar ? %block2 : null);
@append($$root, %fragment0);"
`;

exports[`loop logic iteration 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child3 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = ($$root, person) => {
	let %%template1 = /*#__PURE__*/ @html("<div><!> - </div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @first_child(%child0);
	let %child2 = /*#__PURE__*/ @next_sibling(%child1);
	@text(%child1, () => person.first, @replace);
	@text(%child2, () => person.last, @after);
	@after($$root, %fragment1);
	return %child0;
};

@each(%child3, %block1, () => array);
@append($$root, %fragment0);"
`;

exports[`loop logic index 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child3 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = ($$root, person, index) => {
	let %%template1 = /*#__PURE__*/ @html("<div><!> - </div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @first_child(%child0);
	let %child2 = /*#__PURE__*/ @next_sibling(%child1);
	@text(%child1, () => index, @replace);
	@text(%child2, () => person.name, @after);
	@after($$root, %fragment1);
	return %child0;
};

@each(%child3, %block1, () => array);
@append($$root, %fragment0);"
`;

exports[`loop logic loop after static 1`] = `
"let %template0 = %template1;
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = ($$root, person) => {
	let %%template1 = /*#__PURE__*/ @html("<div></div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	@text(%child1, () => person.name, @append);
	@after($$root, %fragment1);
	return %child1;
};

@each(%child0, %block1, () => array);
@append($$root, %fragment0);"
`;

exports[`loop logic loop between static sandwich 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div><div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @next_sibling(%child0);

let %block1 = ($$root, person) => {
	let %%template1 = /*#__PURE__*/ @html("<div></div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	@text(%child1, () => person.name, @append);
	@after($$root, %fragment1);
	return %child1;
};

@each(%child0, %block1, () => array);
@text(%child2, () => array, @append);
@append($$root, %fragment0);"
`;

exports[`loop logic throw on more than two expression 1`] = `
"expected closing #each bracket (2:32)
1: 
2:       {#each array as person, index, foo}
                                      ^
3:         <div>{index} - {person.name}</div>
4:       {/each}"
`;

exports[`loop logic throw on non-identifier 1`] = `
"expected a local identifier (2:19)
1: 
2:       {#each array as 123}
                         ^
3:         <div>{index} - {person.name}</div>
4:       {/each}"
`;

exports[`loop logic throw on non-identifier 2`] = `
"expected a local identifier (2:19)
1: 
2:       {#each array as (foo, 123)}
                         ^
3:         <div>{index} - {person.name}</div>
4:       {/each}"
`;

exports[`await logic pending 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child1 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("pending");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

@promise(%child1, %block1, null, null, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic resolved 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child1 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("resolved");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

@promise(%child1, null, %block1, null, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic resolved with local 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("the number is <!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @next_sibling(%child0);
	@text(%child0, () => result.value, @after);
	@after($$root, %fragment1);
	return %child1;
};

@promise(%child2, null, %block1, null, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic rejected 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child1 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("rejected");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

@promise(%child1, null, null, %block1, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic rejected with local 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("error: <!>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	let %child1 = /*#__PURE__*/ @next_sibling(%child0);
	@text(%child0, () => error.message, @after);
	@after($$root, %fragment1);
	return %child1;
};

@promise(%child2, null, null, %block1, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic pending and resolved 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("pending");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("resolved");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child1 = /*#__PURE__*/ @first_child(%fragment2);
	@after($$root, %fragment2);
	return %child1;
};

@promise(%child2, %block1, %block2, null, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic pending and resolved with local 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child4 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("pending");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("hello, <!>!");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child1 = /*#__PURE__*/ @first_child(%fragment2);
	let %child2 = /*#__PURE__*/ @next_sibling(%child1);
	let %child3 = /*#__PURE__*/ @next_sibling(%child2);
	@text(%child2, () => name, @replace);
	@after($$root, %fragment2);
	return %child3;
};

@promise(%child4, %block1, %block2, null, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic pending and rejected 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child2 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("pending");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("rejected");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child1 = /*#__PURE__*/ @first_child(%fragment2);
	@after($$root, %fragment2);
	return %child1;
};

@promise(%child2, %block1, null, %block2, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic pending and rejected with local 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child3 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("pending");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	@after($$root, %fragment1);
	return %child0;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("uh, oh! <pre></pre>");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child1 = /*#__PURE__*/ @first_child(%fragment2);
	let %child2 = /*#__PURE__*/ @next_sibling(%child1);
	@text(%child2, () => error.message, @append);
	@after($$root, %fragment2);
	return %child2;
};

@promise(%child3, %block1, null, %block2, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic await after static 1`] = `
"let %template0 = %template2;
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>pending</div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	@after($$root, %fragment1);
	return %child1;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("<div></div>");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child3 = /*#__PURE__*/ @first_child(%fragment2);
	@text(%child3, () => person.name, @append);
	@after($$root, %fragment2);
	return %child3;
};

@promise(%child0, %block1, %block2, null, () => promise);
@append($$root, %fragment0);"
`;

exports[`await logic await between static sandwich 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div><div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child4 = /*#__PURE__*/ @next_sibling(%child0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<div>pending</div>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	let %child2 = /*#__PURE__*/ @first_child(%child1);
	@after($$root, %fragment1);
	return %child1;
};

let %block2 = $$root => {
	let %%template2 = /*#__PURE__*/ @html("<div></div>");
	let %fragment2 = /*#__PURE__*/ @clone(%template2);
	let %child3 = /*#__PURE__*/ @first_child(%fragment2);
	@text(%child3, () => person.name, @append);
	@after($$root, %fragment2);
	return %child3;
};

@promise(%child0, %block1, %block2, null, () => promise);
@text(%child4, () => promise, @append);
@append($$root, %fragment0);"
`;

exports[`keyed logic keyed 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<!>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child1 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<img>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child0 = /*#__PURE__*/ @first_child(%fragment1);
	$: @attr(%child0, "src", src);
	@after($$root, %fragment1);
	return %child0;
};

@keyed(%child1, %block1, () => src);
@append($$root, %fragment0);"
`;

exports[`keyed logic keyed after static 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<img>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	$: @attr(%child1, "src", src);
	@after($$root, %fragment1);
	return %child1;
};

@keyed(%child0, %block1, () => src);
@append($$root, %fragment0);"
`;

exports[`keyed logic keyed between static sandwich 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div><div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child2 = /*#__PURE__*/ @next_sibling(%child0);

let %block1 = $$root => {
	let %%template1 = /*#__PURE__*/ @html("<img>");
	let %fragment1 = /*#__PURE__*/ @clone(%template1);
	let %child1 = /*#__PURE__*/ @first_child(%fragment1);
	$: @attr(%child1, "src", src);
	@after($$root, %fragment1);
	return %child1;
};

@keyed(%child0, %block1, () => src);
@text(%child2, () => src, @append);
@append($$root, %fragment0);"
`;

exports[`comment comment inbetween text 1`] = `
"let %%template0 = /*#__PURE__*/ @html("foo bar baz buzzbazz");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles spacing between attributes 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<button style='display: none;'class=window title=Greet></button>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 1`] = `
"let %%template0 = /*#__PURE__*/ @html("<div></div><div></div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @next_sibling(%child0);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 2`] = `
"let %%template0 = /*#__PURE__*/ @html("<p>The quick brown fox jumps over the lazy dog.</p>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 3`] = `
"let %%template0 = /*#__PURE__*/ @html("<ul><li>A</li><li>B</li><li>C</li></ul>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @first_child(%child1);
let %child3 = /*#__PURE__*/ @next_sibling(%child1);
let %child4 = /*#__PURE__*/ @first_child(%child3);
let %child5 = /*#__PURE__*/ @next_sibling(%child3);
let %child6 = /*#__PURE__*/ @first_child(%child5);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 4`] = `
"let %%template0 = /*#__PURE__*/ @html("<p>Hey, I <em>just</em> found out about this <strong>cool</strong> website! <sup>[1]</sup></p>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @next_sibling(%child1);
let %child3 = /*#__PURE__*/ @first_child(%child2);
let %child4 = /*#__PURE__*/ @next_sibling(%child2);
let %child5 = /*#__PURE__*/ @next_sibling(%child4);
let %child6 = /*#__PURE__*/ @first_child(%child5);
let %child7 = /*#__PURE__*/ @next_sibling(%child5);
let %child8 = /*#__PURE__*/ @next_sibling(%child7);
let %child9 = /*#__PURE__*/ @first_child(%child8);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 5`] = `
"let %%template0 = /*#__PURE__*/ @html("<div>x x <div></div> x x <div></div> x x</div>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @next_sibling(%child1);
let %child3 = /*#__PURE__*/ @next_sibling(%child2);
let %child4 = /*#__PURE__*/ @next_sibling(%child3);
let %child5 = /*#__PURE__*/ @next_sibling(%child4);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 6`] = `
"let %%template0 = /*#__PURE__*/ @html("<svg><symbol id=icon viewBox='0 0 20 20'fill=currentColor><path d=></symbol></svg>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
let %child2 = /*#__PURE__*/ @first_child(%child1);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 7`] = `
"let %%template0 = /*#__PURE__*/ @html("<input a='foo bar'b c>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles html minification 8`] = `
"let %%template0 = /*#__PURE__*/ @html("<svg><use href=icons.svg#refresh></svg>");
let %fragment0 = /*#__PURE__*/ @clone(%template0);
let %child0 = /*#__PURE__*/ @first_child(%fragment0);
let %child1 = /*#__PURE__*/ @first_child(%child0);
@append($$root, %fragment0);"
`;

exports[`miscellaneous handles parsing quirks 1`] = `[Function: toString]`;

exports[`miscellaneous handles parsing quirks 2`] = `[Function: toString]`;

exports[`miscellaneous handles parsing quirks 3`] = `[Function: toString]`;

exports[`miscellaneous handles parsing quirks 4`] = `[Function: toString]`;

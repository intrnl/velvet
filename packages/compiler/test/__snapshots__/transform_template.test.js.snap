// Vitest Snapshot v1

exports[`attribute > dynamic 1`] = `
"let %%template0 = @html(\\"<div></div>\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: @attr(%child0, \\"class\\", className);
@append($$root, %fragment0);
"
`;

exports[`attribute > dynamic boolean 1`] = `
"let %%template0 = @html(\\"<textarea></textarea>\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: @toggle(%child0, \\"readonly\\", is_readonly);
@append($$root, %fragment0);
"
`;

exports[`attribute > dynamic boolean no value 1`] = `
"let %%template0 = @html(\\"<textarea></textarea>\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: @toggle(%child0, \\"readonly\\", true);
@append($$root, %fragment0);
"
`;

exports[`attribute > property 1`] = `
"let %%template0 = @html(\\"<input />\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: %child0[\\"value\\"] = value;
@append($$root, %fragment0);
"
`;

exports[`attribute > property no value 1`] = `
"let %%template0 = @html(\\"<input />\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: %child0[\\"value\\"] = true;
@append($$root, %fragment0);
"
`;

exports[`attribute > ref 1`] = `
"let %%template0 = @html(\\"<input />\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: input = %child0;
@append($$root, %fragment0);
"
`;

exports[`attribute > spread 1`] = `
"let %%template0 = @html(\\"<input />\\");
let %fragment0 = @clone(%template0);
let %child0 = @traverse(%fragment0, [0]);
$: @assign(%child0, props);
@append($$root, %fragment0);
"
`;

exports[`attribute > static 1`] = `
"let %%template0 = @html(\\"<div class=\\\\\\"foo\\\\\\"></div>\\");
let %fragment0 = @clone(%template0);
@append($$root, %fragment0);
"
`;

exports[`attribute > static boolean 1`] = `
"let %%template0 = @html(\\"<textarea readonly></textarea>\\");
let %fragment0 = @clone(%template0);
@append($$root, %fragment0);
"
`;

exports[`attribute > static unquoted 1`] = `
"let %%template0 = @html(\\"<div class=\\\\\\"foo\\\\\\"></div>\\");
let %fragment0 = @clone(%template0);
@append($$root, %fragment0);
"
`;

exports[`await logic > pending 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"pending<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %marker1 = @traverse(%fragment0, [0]);
@promise(%marker1, %block1, null, null, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > pending and rejected 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"pending<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %block2 = $$root => {
  let %%template2 = @html(\\"rejected<!>\\");
  let %fragment2 = @clone(%template2);
  let %marker1 = @traverse(%fragment2, [1]);
  @after($$root, %fragment2);
  return %marker1;
};
let %marker2 = @traverse(%fragment0, [0]);
@promise(%marker2, %block1, null, %block2, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > pending and rejected with local 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"pending<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %block2 = ($$root, error) => {
  let %%template2 = @html(\\"uh, oh! <pre><!></pre><!>\\");
  let %fragment2 = @clone(%template2);
  let %marker1 = @traverse(%fragment2, [1, 0]);
  @text(%marker1, () => error.message);
  let %marker2 = @traverse(%fragment2, [2]);
  @after($$root, %fragment2);
  return %marker2;
};
let %marker3 = @traverse(%fragment0, [0]);
@promise(%marker3, %block1, null, %block2, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > pending and resolved 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"pending<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %block2 = $$root => {
  let %%template2 = @html(\\"resolved<!>\\");
  let %fragment2 = @clone(%template2);
  let %marker1 = @traverse(%fragment2, [1]);
  @after($$root, %fragment2);
  return %marker1;
};
let %marker2 = @traverse(%fragment0, [0]);
@promise(%marker2, %block1, %block2, null, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > pending and resolved with local 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"pending<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %block2 = ($$root, name) => {
  let %%template2 = @html(\\"hello, <!>!<!>\\");
  let %fragment2 = @clone(%template2);
  let %marker1 = @traverse(%fragment2, [1]);
  @text(%marker1, () => name);
  let %marker2 = @traverse(%fragment2, [3]);
  @after($$root, %fragment2);
  return %marker2;
};
let %marker3 = @traverse(%fragment0, [0]);
@promise(%marker3, %block1, %block2, null, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > rejected 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"rejected<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %marker1 = @traverse(%fragment0, [0]);
@promise(%marker1, null, null, %block1, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > rejected with local 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = ($$root, error) => {
  let %%template1 = @html(\\"error: <!><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @text(%marker0, () => error.message);
  let %marker1 = @traverse(%fragment1, [2]);
  @after($$root, %fragment1);
  return %marker1;
};
let %marker2 = @traverse(%fragment0, [0]);
@promise(%marker2, null, null, %block1, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > resolved 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"resolved<!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %marker1 = @traverse(%fragment0, [0]);
@promise(%marker1, null, %block1, null, promise);
@append($$root, %fragment0);
"
`;

exports[`await logic > resolved with local 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = ($$root, result) => {
  let %%template1 = @html(\\"the number is <!><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @text(%marker0, () => result.value);
  let %marker1 = @traverse(%fragment1, [2]);
  @after($$root, %fragment1);
  return %marker1;
};
let %marker2 = @traverse(%fragment0, [0]);
@promise(%marker2, null, %block1, null, promise);
@append($$root, %fragment0);
"
`;

exports[`component > v:component 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = %component => {
  let %child0 = new %component();
  return %child0;
};
let %marker0 = @traverse(%fragment0, [0]);
@dynamic(%marker0, %block1, () => Component);
@append($$root, %fragment0);
"
`;

exports[`component > v:component with children 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = %component => {
  let %%template1 = @html(\\"Hello <!>!\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @text(%marker0, () => name);
  let %child0 = new %component();
  return %child0;
};
let %marker1 = @traverse(%fragment0, [0]);
@dynamic(%marker1, %block1, () => Component);
@append($$root, %fragment0);
"
`;

exports[`component > v:self on a custom element 1`] = `
"let %%template0 = @html(\\"<x-app><div>hello world!</div></x-app>\\");
let %fragment0 = @clone(%template0);
let %child0 = new $$host.constructor();
let %marker0 = @traverse(%fragment0, [0, 0]);
@replace(%marker0, %child0, true);
@append($$root, %fragment0);
"
`;

exports[`conditional logic > consequent 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"<div>foo!</div><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %marker1 = @traverse(%fragment0, [0]);
@show(%marker1, () => foo ? %block1 : null);
@append($$root, %fragment0);
"
`;

exports[`conditional logic > consequent and alternate 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"<div>foo!</div><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %block2 = $$root => {
  let %%template2 = @html(\\"<div>bar!</div><!>\\");
  let %fragment2 = @clone(%template2);
  let %marker1 = @traverse(%fragment2, [1]);
  @after($$root, %fragment2);
  return %marker1;
};
let %marker2 = @traverse(%fragment0, [0]);
@show(%marker2, () => foo ? %block1 : %block2);
@append($$root, %fragment0);
"
`;

exports[`conditional logic > consequent and alternate test 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block2 = $$root => {
  let %%template2 = @html(\\"<div>bar!</div><!>\\");
  let %fragment2 = @clone(%template2);
  let %marker1 = @traverse(%fragment2, [1]);
  @after($$root, %fragment2);
  return %marker1;
};
let %block1 = $$root => {
  let %%template1 = @html(\\"<div>foo!</div><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %marker2 = @traverse(%fragment0, [0]);
@show(%marker2, () => foo ? %block1 : bar ? %block2 : null);
@append($$root, %fragment0);
"
`;

exports[`conditional logic > nested consequent 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"<div>foo!</div><!><!>\\");
  let %fragment1 = @clone(%template1);
  let %block2 = $$root => {
    let %%template2 = @html(\\"<div>bar!</div><!>\\");
    let %fragment2 = @clone(%template2);
    let %marker0 = @traverse(%fragment2, [1]);
    @after($$root, %fragment2);
    return %marker0;
  };
  let %marker1 = @traverse(%fragment1, [1]);
  @show(%marker1, () => bar ? %block2 : null);
  let %marker2 = @traverse(%fragment1, [2]);
  @after($$root, %fragment1);
  return %marker2;
};
let %marker3 = @traverse(%fragment0, [0]);
@show(%marker3, () => foo ? %block1 : null);
@append($$root, %fragment0);
"
`;

exports[`expression > component 1`] = `
"let %%template0 = @html(\\"<div>hello <!>!</div>\\");
let %fragment0 = @clone(%template0);
let %marker0 = @traverse(%fragment0, [0, 1]);
@text(%marker0, () => name);
let %child0 = new Main();
let %marker1 = @traverse(%fragment0, [0]);
@replace(%marker1, %child0, true);
@append($$root, %fragment0);
"
`;

exports[`expression > custom element 1`] = `
"let %%template0 = @html(\\"<x-app>hello <!>!</x-app>\\");
let %fragment0 = @clone(%template0);
let %marker0 = @traverse(%fragment0, [0, 1]);
@text(%marker0, () => name);
@append($$root, %fragment0);
"
`;

exports[`log expression > in conditional 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = $$root => {
  let %%template1 = @html(\\"<!>\\");
  let %fragment1 = @clone(%template1);
  $: console.log($$root, foo)
  let %marker0 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker0;
};
let %marker1 = @traverse(%fragment0, [0]);
@show(%marker1, () => foo ? %block1 : null);
@append($$root, %fragment0);
"
`;

exports[`log expression > multiple 1`] = `
"let %%template0 = @html(\\"\\");
let %fragment0 = @clone(%template0);
$: console.log(foo, bar, baz)
@append($$root, %fragment0);
"
`;

exports[`log expression > single 1`] = `
"let %%template0 = @html(\\"\\");
let %fragment0 = @clone(%template0);
$: console.log(foo)
@append($$root, %fragment0);
"
`;

exports[`log expression > values 1`] = `
"let %%template0 = @html(\\" \\");
let %fragment0 = @clone(%template0);
$: console.log('test', {
  foo,
  baz,
  baz
})
$: console.log([foo, bar, baz])
@append($$root, %fragment0);
"
`;

exports[`loop logic > index 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = ($$root, person, index) => {
  let %%template1 = @html(\\"<div><!> - <!></div><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [0, 0]);
  @text(%marker0, () => index);
  let %marker1 = @traverse(%fragment1, [0, 2]);
  @text(%marker1, () => person.name);
  let %marker2 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker2;
};
let %marker3 = @traverse(%fragment0, [0]);
@each(%marker3, %block1, () => array);
@append($$root, %fragment0);
"
`;

exports[`loop logic > iteration 1`] = `
"let %%template0 = @html(\\"<!>\\");
let %fragment0 = @clone(%template0);
let %block1 = ($$root, person) => {
  let %%template1 = @html(\\"<div><!> - <!></div><!>\\");
  let %fragment1 = @clone(%template1);
  let %marker0 = @traverse(%fragment1, [0, 0]);
  @text(%marker0, () => person.first);
  let %marker1 = @traverse(%fragment1, [0, 2]);
  @text(%marker1, () => person.last);
  let %marker2 = @traverse(%fragment1, [1]);
  @after($$root, %fragment1);
  return %marker2;
};
let %marker3 = @traverse(%fragment0, [0]);
@each(%marker3, %block1, () => array);
@append($$root, %fragment0);
"
`;
